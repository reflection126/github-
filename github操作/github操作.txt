将本地的项目上传到一个新的github仓库的操作：
1.查看当前项目有哪些远程仓库：
	git remote -v
2.删除所有远程仓库:
	git remote rm origin
3.git remote add origin git@git

添加 SSH key 成功后，就有权限向 GitHub 提交自己的项目代码了，提交代码有两种方法：

（1）Clone自己的项目

此处以我在 GitHub 上创建的 test 项目为例，执行如下命令：

git clone git@github.com:stormzhang/test.git

这样就把 test 项目 clone 到了本地，可以把 clone 命令理解为高级的复制，这个时候该项目本身就已经是一个git 仓库了，不需要执行 **git init** 进行初始化，并且已经关联好了远程仓库，只需要在这个 test 目录下任意修改或者添加文件，然后进行 commit ，之后就可以执行：

git push origin master

进行代码提交，这种是最简单方便的一种方式。

怎么获取项目的仓库地址呢？如下图：

5ElBM1Rd9v8vWfPW.jpeg

 （2）关联本地已有项目

如果本地已经有一个完整的 git 仓库，并且已经进行了多次 commit ，这个时候第一种方法就不适合了。

假设本地有个 test2 的项目，需要在 GitHub 上建一个 test 的项目，然后把本地 test2 上的所有代码 commit 记录提交到 GitHub 上的 test 项目。

第一步就是在 GitHub 上建一个 test 项目，这个想必大家都会了，就不多讲了。

第二步把本地 test2 项目与 GitHub 上的 test 项目进行关联，切换到 test2 目录，执行如下命令：

git remote add origin git@github.com:stormzhang/test.git

意思是添加一个远程仓库，地址是 **git@github.com:stormzhang/test.git** ，而 origin 是给这个项目的远程仓库起的名字（可以随便取），只不过大家公认的只有一个远程仓库时名字就是 origin ，为什么要给远程仓库取名字？因为我们可能一个项目有多个远程仓库，比如 GitHub 一个，比如公司一个，这样的话提交到不同的远程仓库就需要指定不同的仓库名字。

查看当前项目有哪些远程仓库可以执行如下命令：

git remote -v

接下来，本地的仓库就可以向远程仓库进行代码提交了：

git push origin master

此命令就是默认向 GitHub 上的 test 目录提交了代码，这个代码是在 master 分支。当然你可以提交到指定的分支，这个之后的文章再详细讲解。

注意：在提交代码之前先要设置下自己的用户名与邮箱，这些信息会出现在所有的 commit 记录里，执行以下代码就可以设置：


git config —global user.name "stormzhang"

git config —global user.email "stormzhang.dev@gmail.com"

总结

通过本课时的介绍，终于可以成功的向 GitHub 提交代码了，但是相信大家还有很多疑问，比如关于分支的理解与使用，比如 Git 的其他一些有用的配置，比如怎么向一些开源项目贡献代码，发起 Pull Request 等，之后的系列文章会逐一进行介绍。